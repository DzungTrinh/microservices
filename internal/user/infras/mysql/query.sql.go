// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (id, user_id, token, user_agent, ip_address, expires_at, revoked)
VALUES (?, ?, ?, ?, ?, ?, 0)
`

type CreateRefreshTokenParams struct {
	ID        string    `json:"id"`
	UserID    string    `json:"user_id"`
	Token     string    `json:"token"`
	UserAgent string    `json:"user_agent"`
	IpAddress string    `json:"ip_address"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.UserAgent,
		arg.IpAddress,
		arg.ExpiresAt,
	)
	return err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, username, email, password, created_at, updated_at)
VALUES (?, ?, ?, ?, NOW(), NOW())
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
	)
}

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO user_roles (user_id, role_id) VALUES (?, ?)
`

type CreateUserRoleParams struct {
	UserID string `json:"user_id"`
	RoleID string `json:"role_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, createUserRole, arg.UserID, arg.RoleID)
	return err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at < NOW() OR revoked = 1
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteUserRoles = `-- name: DeleteUserRoles :exec
DELETE FROM user_roles WHERE user_id = ?
`

func (q *Queries) DeleteUserRoles(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserRoles, userID)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT u.id, u.created_at, u.updated_at, u.username, u.email, u.password,
       GROUP_CONCAT(r.name) AS roles
FROM users u
         LEFT JOIN user_roles ur ON u.id = ur.user_id
         LEFT JOIN roles r ON ur.role_id = r.id
GROUP BY u.id
`

type GetAllUsersRow struct {
	ID        string         `json:"id"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	Roles     sql.NullString `json:"roles"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token, user_agent, ip_address, created_at, expires_at, revoked
FROM refresh_tokens
WHERE token = ? AND expires_at > NOW() AND revoked = 0
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.UserAgent,
		&i.IpAddress,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.Revoked,
	)
	return i, err
}

const getRoleIDByName = `-- name: GetRoleIDByName :one
SELECT id FROM roles WHERE name = ?
`

func (q *Queries) GetRoleIDByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRoleIDByName, name)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u.id, u.created_at, u.updated_at, u.username, u.email, u.password,
       GROUP_CONCAT(r.name) AS roles
FROM users u
         LEFT JOIN user_roles ur ON u.id = ur.user_id
         LEFT JOIN roles r ON ur.role_id = r.id
WHERE u.email = ?
GROUP BY u.id
`

type GetUserByEmailRow struct {
	ID        string         `json:"id"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	Roles     sql.NullString `json:"roles"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Roles,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT u.id, u.created_at, u.updated_at, u.username, u.email, u.password,
       GROUP_CONCAT(r.name) AS roles
FROM users u
         LEFT JOIN user_roles ur ON u.id = ur.user_id
         LEFT JOIN roles r ON ur.role_id = r.id
WHERE u.id = ?
GROUP BY u.id
`

type GetUserByIDRow struct {
	ID        string         `json:"id"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
	Roles     sql.NullString `json:"roles"`
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Roles,
	)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT GROUP_CONCAT(r.name) AS roles
FROM users u
         LEFT JOIN user_roles ur ON u.id = ur.user_id
         LEFT JOIN roles r ON ur.role_id = r.id
WHERE u.id = ?
GROUP BY u.id
`

func (q *Queries) GetUserRoles(ctx context.Context, id string) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var roles sql.NullString
		if err := rows.Scan(&roles); err != nil {
			return nil, err
		}
		items = append(items, roles)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked = 1
WHERE token = ?
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
