// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: outbox.sql

package mysql

import (
	"context"
	"encoding/json"
)

const getPendingOutboxEvents = `-- name: GetPendingOutboxEvents :many
SELECT
    id,
    aggregate_type,
    aggregate_id,
    type,
    payload,
    status,
    created_at,
    processed_at
FROM outbox_events
WHERE status = 'pending'
ORDER BY created_at
LIMIT ?
`

func (q *Queries) GetPendingOutboxEvents(ctx context.Context, limit int32) ([]OutboxEvent, error) {
	rows, err := q.db.QueryContext(ctx, getPendingOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OutboxEvent
	for rows.Next() {
		var i OutboxEvent
		if err := rows.Scan(
			&i.ID,
			&i.AggregateType,
			&i.AggregateID,
			&i.Type,
			&i.Payload,
			&i.Status,
			&i.CreatedAt,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOutboxEvent = `-- name: InsertOutboxEvent :exec
INSERT INTO outbox_events (
    aggregate_type,
    aggregate_id,
    type,
    payload,
    status,
    created_at
) VALUES (?, ?, ?, ?, ?, NOW())
`

type InsertOutboxEventParams struct {
	AggregateType string          `json:"aggregate_type"`
	AggregateID   string          `json:"aggregate_id"`
	Type          string          `json:"type"`
	Payload       json.RawMessage `json:"payload"`
	Status        string          `json:"status"`
}

func (q *Queries) InsertOutboxEvent(ctx context.Context, arg InsertOutboxEventParams) error {
	_, err := q.db.ExecContext(ctx, insertOutboxEvent,
		arg.AggregateType,
		arg.AggregateID,
		arg.Type,
		arg.Payload,
		arg.Status,
	)
	return err
}

const markOutboxEventProcessed = `-- name: MarkOutboxEventProcessed :exec
UPDATE outbox_events
SET status = 'processed', processed_at = NOW()
WHERE id = ?
`

func (q *Queries) MarkOutboxEventProcessed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markOutboxEventProcessed, id)
	return err
}
