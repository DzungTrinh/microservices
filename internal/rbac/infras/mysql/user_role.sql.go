// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_role.sql

package mysql

import (
	"context"
)

const assignRolesToUser = `-- name: AssignRolesToUser :exec
INSERT INTO user_roles (user_id, role_id, created_at)
SELECT ?, ?, NOW()
FROM roles
WHERE roles.id = ? AND roles.deleted_at IS NULL
ON DUPLICATE KEY UPDATE user_id = user_id
`

type AssignRolesToUserParams struct {
	UserID string `json:"user_id"`
	RoleID string `json:"role_id"`
	ID     string `json:"id"`
}

func (q *Queries) AssignRolesToUser(ctx context.Context, arg AssignRolesToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRolesToUser, arg.UserID, arg.RoleID, arg.ID)
	return err
}

const listRolesForUser = `-- name: ListRolesForUser :many
SELECT r.id, r.name, r.built_in, r.created_at, COALESCE(r.deleted_at, TIMESTAMP '0001-01-01 00:00:00') AS deleted_at
FROM roles r
         JOIN user_roles ur ON r.id = ur.role_id
WHERE ur.user_id = ? AND ur.deleted_at IS NULL AND r.deleted_at IS NULL
`

func (q *Queries) ListRolesForUser(ctx context.Context, userID string) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BuiltIn,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteUserRole = `-- name: SoftDeleteUserRole :exec
UPDATE user_roles
SET deleted_at = NOW()
WHERE user_id = ? AND role_id = ? AND deleted_at IS NULL
`

type SoftDeleteUserRoleParams struct {
	UserID string `json:"user_id"`
	RoleID string `json:"role_id"`
}

func (q *Queries) SoftDeleteUserRole(ctx context.Context, arg SoftDeleteUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteUserRole, arg.UserID, arg.RoleID)
	return err
}
