// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role_permission.sql

package mysql

import (
	"context"
)

const assignPermissionsToRole = `-- name: AssignPermissionsToRole :exec
INSERT INTO role_permissions (role_id, permission_id, created_at)
SELECT ?, ?, NOW()
`

type AssignPermissionsToRoleParams struct {
	RoleID       string `json:"role_id"`
	PermissionID string `json:"permission_id"`
}

func (q *Queries) AssignPermissionsToRole(ctx context.Context, arg AssignPermissionsToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionsToRole, arg.RoleID, arg.PermissionID)
	return err
}

const listPermissionsForRole = `-- name: ListPermissionsForRole :many
SELECT p.id, p.name, p.created_at, COALESCE(p.deleted_at, TIMESTAMP '0001-01-01 00:00:00') AS deleted_at
FROM permissions p
         JOIN role_permissions rp ON p.id = rp.permission_id
WHERE rp.role_id = ? AND rp.deleted_at IS NULL AND p.deleted_at IS NULL
`

func (q *Queries) ListPermissionsForRole(ctx context.Context, roleID string) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissionsForRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
