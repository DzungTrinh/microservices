// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const createRole = `-- name: CreateRole :execresult
INSERT INTO roles (id, name, built_in, created_at)
    VALUES (?, ?, ?, NOW())
`

type CreateRoleParams struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	BuiltIn bool   `json:"built_in"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRole, arg.ID, arg.Name, arg.BuiltIn)
}

const deleteRole = `-- name: DeleteRole :exec
UPDATE roles
SET deleted_at = NOW()
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeleteRole(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, built_in, created_at
FROM roles
WHERE id = ? AND deleted_at IS NULL
`

type GetRoleByIDRow struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	BuiltIn   bool      `json:"built_in"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetRoleByID(ctx context.Context, id string) (GetRoleByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i GetRoleByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BuiltIn,
		&i.CreatedAt,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, built_in, created_at, deleted_at
FROM roles
WHERE deleted_at IS NULL
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BuiltIn,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles
SET name = ?, built_in = ?, updated_at = NOW()
WHERE id = ? AND deleted_at IS NULL
`

type UpdateRoleParams struct {
	Name    string `json:"name"`
	BuiltIn bool   `json:"built_in"`
	ID      string `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.Name, arg.BuiltIn, arg.ID)
	return err
}
