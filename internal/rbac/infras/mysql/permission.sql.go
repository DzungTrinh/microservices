// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permission.sql

package mysql

import (
	"context"
	"database/sql"
)

const createPermission = `-- name: CreatePermission :execresult
INSERT INTO permissions (id, name, created_at)
    VALUES (?, ?, NOW())
`

type CreatePermissionParams struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPermission, arg.ID, arg.Name)
}

const deletePermission = `-- name: DeletePermission :exec
UPDATE permissions
SET deleted_at = NOW()
WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) DeletePermission(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const listPermissions = `-- name: ListPermissions :many
SELECT id, name, created_at, deleted_at
FROM permissions
`

func (q *Queries) ListPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, listPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
