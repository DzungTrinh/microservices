// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_permission.sql

package mysql

import (
	"context"
	"time"
)

const assignPermissionsToUser = `-- name: AssignPermissionsToUser :exec
INSERT INTO user_permissions (user_id, perm_id, granter_id, expires_at, created_at)
VALUES (?, ?, ?, ?, NOW())
ON DUPLICATE KEY UPDATE granter_id = ?, expires_at = ?
`

type AssignPermissionsToUserParams struct {
	UserID      string    `json:"user_id"`
	PermID      string    `json:"perm_id"`
	GranterID   string    `json:"granter_id"`
	ExpiresAt   time.Time `json:"expires_at"`
	GranterID_2 string    `json:"granter_id_2"`
	ExpiresAt_2 time.Time `json:"expires_at_2"`
}

func (q *Queries) AssignPermissionsToUser(ctx context.Context, arg AssignPermissionsToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionsToUser,
		arg.UserID,
		arg.PermID,
		arg.GranterID,
		arg.ExpiresAt,
		arg.GranterID_2,
		arg.ExpiresAt_2,
	)
	return err
}

const listPermissionsForUser = `-- name: ListPermissionsForUser :many
SELECT p.id, p.name, up.created_at, up.expires_at, up.granter_id
FROM permissions p
         JOIN user_permissions up ON p.id = up.permission_id
WHERE up.user_id = ?
`

type ListPermissionsForUserRow struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"created_at"`
	ExpiresAt time.Time `json:"expires_at"`
	GranterID string    `json:"granter_id"`
}

func (q *Queries) ListPermissionsForUser(ctx context.Context, userID string) ([]ListPermissionsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listPermissionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPermissionsForUserRow
	for rows.Next() {
		var i ListPermissionsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ExpiresAt,
			&i.GranterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
