// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/rbac.proto

package rbacv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_v1_rbac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{0}
}

type Role struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // UUID of the role
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // Role name
	BuiltIn       bool                   `protobuf:"varint,3,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty"`      // Whether the role is built-in
	CreatedAt     string                 `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp (ISO8601)
	DeletedAt     string                 `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"` // Deletion timestamp (ISO8601, optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Role) Reset() {
	*x = Role{}
	mi := &file_v1_rbac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Role) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetBuiltIn() bool {
	if x != nil {
		return x.BuiltIn
	}
	return false
}

func (x *Role) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Role) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type Permission struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // UUID of the permission
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // Permission name
	CreatedAt     string                 `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp (ISO8601)
	DeletedAt     string                 `protobuf:"bytes,4,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"` // Deletion timestamp (ISO8601, optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permission) Reset() {
	*x = Permission{}
	mi := &file_v1_rbac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *Permission) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Permission) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type CreateRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                       // Role name (e.g., "admin", "user")
	BuiltIn       bool                   `protobuf:"varint,2,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty"` // Whether the role is built-in
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRoleRequest) Reset() {
	*x = CreateRoleRequest{}
	mi := &file_v1_rbac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleRequest) ProtoMessage() {}

func (x *CreateRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleRequest.ProtoReflect.Descriptor instead.
func (*CreateRoleRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRoleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRoleRequest) GetBuiltIn() bool {
	if x != nil {
		return x.BuiltIn
	}
	return false
}

type CreateRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"` // UUID of the created role
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // Role name
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`            // True if the role was created
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                 // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRoleResponse) Reset() {
	*x = CreateRoleResponse{}
	mi := &file_v1_rbac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleResponse) ProtoMessage() {}

func (x *CreateRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleResponse.ProtoReflect.Descriptor instead.
func (*CreateRoleResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRoleResponse) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *CreateRoleResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateRoleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type GetRoleByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // UUID of the role
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoleByNameRequest) Reset() {
	*x = GetRoleByNameRequest{}
	mi := &file_v1_rbac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleByNameRequest) ProtoMessage() {}

func (x *GetRoleByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleByNameRequest.ProtoReflect.Descriptor instead.
func (*GetRoleByNameRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *GetRoleByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetRoleByNameResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`          // UUID of the role
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                            // Role name
	BuiltIn       bool                   `protobuf:"varint,3,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty"`      // Whether the role is built-in
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`                     // True if the role was retrieved
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                          // Error message if failed
	CreatedAt     string                 `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp (ISO8601)
	DeletedAt     string                 `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"` // Deletion timestamp (ISO8601, optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRoleByNameResponse) Reset() {
	*x = GetRoleByNameResponse{}
	mi := &file_v1_rbac_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRoleByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoleByNameResponse) ProtoMessage() {}

func (x *GetRoleByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoleByNameResponse.ProtoReflect.Descriptor instead.
func (*GetRoleByNameResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *GetRoleByNameResponse) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *GetRoleByNameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRoleByNameResponse) GetBuiltIn() bool {
	if x != nil {
		return x.BuiltIn
	}
	return false
}

func (x *GetRoleByNameResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetRoleByNameResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetRoleByNameResponse) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetRoleByNameResponse) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type ListRolesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Roles         []*Role                `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`      // List of roles
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"` // True if roles were retrieved
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesResponse) Reset() {
	*x = ListRolesResponse{}
	mi := &file_v1_rbac_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesResponse) ProtoMessage() {}

func (x *ListRolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesResponse.ProtoReflect.Descriptor instead.
func (*ListRolesResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *ListRolesResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ListRolesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListRolesResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                           // UUID of the role
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                       // Updated role name
	BuiltIn       bool                   `protobuf:"varint,3,opt,name=built_in,json=builtIn,proto3" json:"built_in,omitempty"` // Updated built-in status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRoleRequest) Reset() {
	*x = UpdateRoleRequest{}
	mi := &file_v1_rbac_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleRequest) ProtoMessage() {}

func (x *UpdateRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRoleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRoleRequest) GetBuiltIn() bool {
	if x != nil {
		return x.BuiltIn
	}
	return false
}

type UpdateRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"` // UUID of the updated role
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // Updated role name
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`            // True if the role was updated
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                 // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRoleResponse) Reset() {
	*x = UpdateRoleResponse{}
	mi := &file_v1_rbac_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoleResponse) ProtoMessage() {}

func (x *UpdateRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoleResponse.ProtoReflect.Descriptor instead.
func (*UpdateRoleResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRoleResponse) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *UpdateRoleResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateRoleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeleteRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // UUID of the role
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRoleRequest) Reset() {
	*x = DeleteRoleRequest{}
	mi := &file_v1_rbac_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleRequest) ProtoMessage() {}

func (x *DeleteRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRoleRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if the role was deleted
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRoleResponse) Reset() {
	*x = DeleteRoleResponse{}
	mi := &file_v1_rbac_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleResponse) ProtoMessage() {}

func (x *DeleteRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteRoleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AssignRolesToUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`    // UUID of the user
	RoleIds       []string               `protobuf:"bytes,2,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"` // List of role UUIDs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRolesToUserRequest) Reset() {
	*x = AssignRolesToUserRequest{}
	mi := &file_v1_rbac_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRolesToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRolesToUserRequest) ProtoMessage() {}

func (x *AssignRolesToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRolesToUserRequest.ProtoReflect.Descriptor instead.
func (*AssignRolesToUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{12}
}

func (x *AssignRolesToUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignRolesToUserRequest) GetRoleIds() []string {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type AssignRolesToUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if roles were assigned
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignRolesToUserResponse) Reset() {
	*x = AssignRolesToUserResponse{}
	mi := &file_v1_rbac_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignRolesToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignRolesToUserResponse) ProtoMessage() {}

func (x *AssignRolesToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignRolesToUserResponse.ProtoReflect.Descriptor instead.
func (*AssignRolesToUserResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{13}
}

func (x *AssignRolesToUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AssignRolesToUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type CreatePermissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Permission name (e.g., "read:users")
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePermissionRequest) Reset() {
	*x = CreatePermissionRequest{}
	mi := &file_v1_rbac_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePermissionRequest) ProtoMessage() {}

func (x *CreatePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePermissionRequest.ProtoReflect.Descriptor instead.
func (*CreatePermissionRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{14}
}

func (x *CreatePermissionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreatePermissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PermissionId  string                 `protobuf:"bytes,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"` // UUID of the created permission
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                     // Permission name
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`                              // True if the permission was created
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                                   // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePermissionResponse) Reset() {
	*x = CreatePermissionResponse{}
	mi := &file_v1_rbac_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePermissionResponse) ProtoMessage() {}

func (x *CreatePermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePermissionResponse.ProtoReflect.Descriptor instead.
func (*CreatePermissionResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{15}
}

func (x *CreatePermissionResponse) GetPermissionId() string {
	if x != nil {
		return x.PermissionId
	}
	return ""
}

func (x *CreatePermissionResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePermissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreatePermissionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type DeletePermissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // UUID of the permission
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePermissionRequest) Reset() {
	*x = DeletePermissionRequest{}
	mi := &file_v1_rbac_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePermissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionRequest) ProtoMessage() {}

func (x *DeletePermissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionRequest.ProtoReflect.Descriptor instead.
func (*DeletePermissionRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{16}
}

func (x *DeletePermissionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeletePermissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if the permission was deleted
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePermissionResponse) Reset() {
	*x = DeletePermissionResponse{}
	mi := &file_v1_rbac_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePermissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePermissionResponse) ProtoMessage() {}

func (x *DeletePermissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePermissionResponse.ProtoReflect.Descriptor instead.
func (*DeletePermissionResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{17}
}

func (x *DeletePermissionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeletePermissionResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AssignPermissionsToRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`                      // UUID of the role
	PermissionIds []string               `protobuf:"bytes,2,rep,name=permission_ids,json=permissionIds,proto3" json:"permission_ids,omitempty"` // List of permission UUIDs
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionsToRoleRequest) Reset() {
	*x = AssignPermissionsToRoleRequest{}
	mi := &file_v1_rbac_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionsToRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsToRoleRequest) ProtoMessage() {}

func (x *AssignPermissionsToRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsToRoleRequest.ProtoReflect.Descriptor instead.
func (*AssignPermissionsToRoleRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{18}
}

func (x *AssignPermissionsToRoleRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *AssignPermissionsToRoleRequest) GetPermissionIds() []string {
	if x != nil {
		return x.PermissionIds
	}
	return nil
}

type AssignPermissionsToRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if permissions were assigned
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionsToRoleResponse) Reset() {
	*x = AssignPermissionsToRoleResponse{}
	mi := &file_v1_rbac_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionsToRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsToRoleResponse) ProtoMessage() {}

func (x *AssignPermissionsToRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsToRoleResponse.ProtoReflect.Descriptor instead.
func (*AssignPermissionsToRoleResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{19}
}

func (x *AssignPermissionsToRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AssignPermissionsToRoleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AssignPermissionsToUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // UUID of the user
	PermissionIds []string               `protobuf:"bytes,2,rep,name=permission_ids,json=permissionIds,proto3" json:"permission_ids,omitempty"` // List of permission UUIDs
	GranterId     string                 `protobuf:"bytes,3,opt,name=granter_id,json=granterId,proto3" json:"granter_id,omitempty"`             // UUID of the granter (optional)
	ExpiresAt     string                 `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`             // Expiration timestamp (optional, ISO8601)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionsToUserRequest) Reset() {
	*x = AssignPermissionsToUserRequest{}
	mi := &file_v1_rbac_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionsToUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsToUserRequest) ProtoMessage() {}

func (x *AssignPermissionsToUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsToUserRequest.ProtoReflect.Descriptor instead.
func (*AssignPermissionsToUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{20}
}

func (x *AssignPermissionsToUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AssignPermissionsToUserRequest) GetPermissionIds() []string {
	if x != nil {
		return x.PermissionIds
	}
	return nil
}

func (x *AssignPermissionsToUserRequest) GetGranterId() string {
	if x != nil {
		return x.GranterId
	}
	return ""
}

func (x *AssignPermissionsToUserRequest) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

type AssignPermissionsToUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // True if permissions were assigned
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignPermissionsToUserResponse) Reset() {
	*x = AssignPermissionsToUserResponse{}
	mi := &file_v1_rbac_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignPermissionsToUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignPermissionsToUserResponse) ProtoMessage() {}

func (x *AssignPermissionsToUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignPermissionsToUserResponse.ProtoReflect.Descriptor instead.
func (*AssignPermissionsToUserResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{21}
}

func (x *AssignPermissionsToUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AssignPermissionsToUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListPermissionsForRoleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleId        string                 `protobuf:"bytes,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"` // UUID of the role
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsForRoleRequest) Reset() {
	*x = ListPermissionsForRoleRequest{}
	mi := &file_v1_rbac_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsForRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsForRoleRequest) ProtoMessage() {}

func (x *ListPermissionsForRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsForRoleRequest.ProtoReflect.Descriptor instead.
func (*ListPermissionsForRoleRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{22}
}

func (x *ListPermissionsForRoleRequest) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

type ListPermissionsForRoleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []*Permission          `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"` // List of permissions
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`        // True if permissions were retrieved
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`             // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsForRoleResponse) Reset() {
	*x = ListPermissionsForRoleResponse{}
	mi := &file_v1_rbac_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsForRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsForRoleResponse) ProtoMessage() {}

func (x *ListPermissionsForRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsForRoleResponse.ProtoReflect.Descriptor instead.
func (*ListPermissionsForRoleResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{23}
}

func (x *ListPermissionsForRoleResponse) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ListPermissionsForRoleResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListPermissionsForRoleResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListPermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []*Permission          `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"` // List of permissions
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`        // True if permissions were retrieved
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`             // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsResponse) Reset() {
	*x = ListPermissionsResponse{}
	mi := &file_v1_rbac_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsResponse) ProtoMessage() {}

func (x *ListPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsResponse.ProtoReflect.Descriptor instead.
func (*ListPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{24}
}

func (x *ListPermissionsResponse) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ListPermissionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListPermissionsResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListPermissionsForUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // UUID of the user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsForUserRequest) Reset() {
	*x = ListPermissionsForUserRequest{}
	mi := &file_v1_rbac_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsForUserRequest) ProtoMessage() {}

func (x *ListPermissionsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsForUserRequest.ProtoReflect.Descriptor instead.
func (*ListPermissionsForUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{25}
}

func (x *ListPermissionsForUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListPermissionsForUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []*Permission          `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty"` // List of permissions
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`        // True if permissions were retrieved
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`             // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPermissionsForUserResponse) Reset() {
	*x = ListPermissionsForUserResponse{}
	mi := &file_v1_rbac_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPermissionsForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPermissionsForUserResponse) ProtoMessage() {}

func (x *ListPermissionsForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPermissionsForUserResponse.ProtoReflect.Descriptor instead.
func (*ListPermissionsForUserResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{26}
}

func (x *ListPermissionsForUserResponse) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ListPermissionsForUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListPermissionsForUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ListRolesForUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // UUID of the user
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesForUserRequest) Reset() {
	*x = ListRolesForUserRequest{}
	mi := &file_v1_rbac_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesForUserRequest) ProtoMessage() {}

func (x *ListRolesForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesForUserRequest.ProtoReflect.Descriptor instead.
func (*ListRolesForUserRequest) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{27}
}

func (x *ListRolesForUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListRolesForUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Roles         []*Role                `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`      // List of roles
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"` // True if roles were retrieved
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`      // Error message if failed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolesForUserResponse) Reset() {
	*x = ListRolesForUserResponse{}
	mi := &file_v1_rbac_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolesForUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolesForUserResponse) ProtoMessage() {}

func (x *ListRolesForUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rbac_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolesForUserResponse.ProtoReflect.Descriptor instead.
func (*ListRolesForUserResponse) Descriptor() ([]byte, []int) {
	return file_v1_rbac_proto_rawDescGZIP(), []int{28}
}

func (x *ListRolesForUserResponse) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ListRolesForUserResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListRolesForUserResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_v1_rbac_proto protoreflect.FileDescriptor

const file_v1_rbac_proto_rawDesc = "" +
	"\n" +
	"\rv1/rbac.proto\x12\arbac.v1\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\a\n" +
	"\x05Empty\"\x83\x01\n" +
	"\x04Role\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\bbuilt_in\x18\x03 \x01(\bR\abuiltIn\x12\x1d\n" +
	"\n" +
	"created_at\x18\x04 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"deleted_at\x18\x05 \x01(\tR\tdeletedAt\"n\n" +
	"\n" +
	"Permission\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"deleted_at\x18\x04 \x01(\tR\tdeletedAt\"B\n" +
	"\x11CreateRoleRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\bbuilt_in\x18\x02 \x01(\bR\abuiltIn\"q\n" +
	"\x12CreateRoleResponse\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"*\n" +
	"\x14GetRoleByNameRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\xcd\x01\n" +
	"\x15GetRoleByNameResponse\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\bbuilt_in\x18\x03 \x01(\bR\abuiltIn\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x12\x1d\n" +
	"\n" +
	"created_at\x18\x06 \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"deleted_at\x18\a \x01(\tR\tdeletedAt\"h\n" +
	"\x11ListRolesResponse\x12#\n" +
	"\x05roles\x18\x01 \x03(\v2\r.rbac.v1.RoleR\x05roles\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"R\n" +
	"\x11UpdateRoleRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\bbuilt_in\x18\x03 \x01(\bR\abuiltIn\"q\n" +
	"\x12UpdateRoleResponse\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"#\n" +
	"\x11DeleteRoleRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"D\n" +
	"\x12DeleteRoleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"N\n" +
	"\x18AssignRolesToUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x19\n" +
	"\brole_ids\x18\x02 \x03(\tR\aroleIds\"K\n" +
	"\x19AssignRolesToUserResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"-\n" +
	"\x17CreatePermissionRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\x83\x01\n" +
	"\x18CreatePermissionResponse\x12#\n" +
	"\rpermission_id\x18\x01 \x01(\tR\fpermissionId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\")\n" +
	"\x17DeletePermissionRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"J\n" +
	"\x18DeletePermissionResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"`\n" +
	"\x1eAssignPermissionsToRoleRequest\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\x12%\n" +
	"\x0epermission_ids\x18\x02 \x03(\tR\rpermissionIds\"Q\n" +
	"\x1fAssignPermissionsToRoleResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x9e\x01\n" +
	"\x1eAssignPermissionsToUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12%\n" +
	"\x0epermission_ids\x18\x02 \x03(\tR\rpermissionIds\x12\x1d\n" +
	"\n" +
	"granter_id\x18\x03 \x01(\tR\tgranterId\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x04 \x01(\tR\texpiresAt\"Q\n" +
	"\x1fAssignPermissionsToUserResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"8\n" +
	"\x1dListPermissionsForRoleRequest\x12\x17\n" +
	"\arole_id\x18\x01 \x01(\tR\x06roleId\"\x87\x01\n" +
	"\x1eListPermissionsForRoleResponse\x125\n" +
	"\vpermissions\x18\x01 \x03(\v2\x13.rbac.v1.PermissionR\vpermissions\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x80\x01\n" +
	"\x17ListPermissionsResponse\x125\n" +
	"\vpermissions\x18\x01 \x03(\v2\x13.rbac.v1.PermissionR\vpermissions\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"8\n" +
	"\x1dListPermissionsForUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"\x87\x01\n" +
	"\x1eListPermissionsForUserResponse\x125\n" +
	"\vpermissions\x18\x01 \x03(\v2\x13.rbac.v1.PermissionR\vpermissions\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"2\n" +
	"\x17ListRolesForUserRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"o\n" +
	"\x18ListRolesForUserResponse\x12#\n" +
	"\x05roles\x18\x01 \x03(\v2\r.rbac.v1.RoleR\x05roles\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error2\xe7)\n" +
	"\vRBACService\x12\xee\x02\n" +
	"\n" +
	"CreateRole\x12\x1a.rbac.v1.CreateRoleRequest\x1a\x1b.rbac.v1.CreateRoleResponse\"\xa6\x02\x92A\x85\x02\n" +
	"\x04RBAC\x12\vCreate role\x1aCCreates a new role in the rbac_db.roles table. Requires admin role.J\"\n" +
	"\x03200\x12\x1b\n" +
	"\x19Role created successfullyJ2\n" +
	"\x03400\x12+\n" +
	")Invalid request (e.g., missing role name)J!\n" +
	"\x03409\x12\x1a\n" +
	"\x18Role name already existsJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/api/v1/rbac/roles\x12\xd1\x02\n" +
	"\rGetRoleByName\x12\x1d.rbac.v1.GetRoleByNameRequest\x1a\x1e.rbac.v1.GetRoleByNameResponse\"\x80\x02\x92A\xdb\x01\n" +
	"\x04RBAC\x12\x10Get role by Name\x1aPRetrieves details of a role from rbac_db.roles by its name. Requires admin role.J$\n" +
	"\x03200\x12\x1d\n" +
	"\x1bRole retrieved successfullyJ\x17\n" +
	"\x03404\x12\x10\n" +
	"\x0eRole not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x1b\x12\x19/api/v1/rbac/roles/{name}\x12\x8b\x02\n" +
	"\tListRoles\x12\x0e.rbac.v1.Empty\x1a\x1a.rbac.v1.ListRolesResponse\"\xd1\x01\x92A\xb3\x01\n" +
	"\x04RBAC\x12\n" +
	"List roles\x1aFRetrieves a list of all roles from rbac_db.roles. Requires admin role.J%\n" +
	"\x03200\x12\x1e\n" +
	"\x1cRoles retrieved successfullyJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x14\x12\x12/api/v1/rbac/roles\x12\xf8\x02\n" +
	"\n" +
	"UpdateRole\x12\x1a.rbac.v1.UpdateRoleRequest\x1a\x1b.rbac.v1.UpdateRoleResponse\"\xb0\x02\x92A\x8a\x02\n" +
	"\x04RBAC\x12\vUpdate role\x1aTUpdates the name or built-in status of a role in rbac_db.roles. Requires admin role.J\"\n" +
	"\x03200\x12\x1b\n" +
	"\x19Role updated successfullyJ0\n" +
	"\x03400\x12)\n" +
	"'Invalid request (e.g., invalid role ID)J\x17\n" +
	"\x03404\x12\x10\n" +
	"\x0eRole not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x1c:\x01*\x1a\x17/api/v1/rbac/roles/{id}\x12\xbf\x02\n" +
	"\n" +
	"DeleteRole\x12\x1a.rbac.v1.DeleteRoleRequest\x1a\x1b.rbac.v1.DeleteRoleResponse\"\xf7\x01\x92A\xd4\x01\n" +
	"\x04RBAC\x12\vDelete role\x1aPSoft-deletes a role in rbac_db.roles by setting deleted_at. Requires admin role.J\"\n" +
	"\x03200\x12\x1b\n" +
	"\x19Role deleted successfullyJ\x17\n" +
	"\x03404\x12\x10\n" +
	"\x0eRole not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x19*\x17/api/v1/rbac/roles/{id}\x12\xce\x03\n" +
	"\x11AssignRolesToUser\x12!.rbac.v1.AssignRolesToUserRequest\x1a\".rbac.v1.AssignRolesToUserResponse\"\xf1\x02\x92A\xcb\x02\n" +
	"\x04RBAC\x12\x14Assign roles to user\x1a\x99\x01Assigns multiple roles to a user, updating rbac_db.user_roles. Used during registration or role management. Requires admin role for non-self assignments.J$\n" +
	"\x03200\x12\x1d\n" +
	"\x1bRoles assigned successfullyJ9\n" +
	"\x03400\x122\n" +
	"0Invalid request (e.g., invalid user or role IDs)J\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x1c:\x01*\"\x17/api/v1/rbac/user-roles\x12\xa0\x03\n" +
	"\x10CreatePermission\x12 .rbac.v1.CreatePermissionRequest\x1a!.rbac.v1.CreatePermissionResponse\"\xc6\x02\x92A\x9f\x02\n" +
	"\x04RBAC\x12\x11Create permission\x1aECreates a new permission in rbac_db.permissions. Requires admin role.J(\n" +
	"\x03200\x12!\n" +
	"\x1fPermission created successfullyJ8\n" +
	"\x03400\x121\n" +
	"/Invalid request (e.g., missing permission name)J'\n" +
	"\x03409\x12 \n" +
	"\x1ePermission name already existsJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x1d:\x01*\"\x18/api/v1/rbac/permissions\x12\xf7\x02\n" +
	"\x10DeletePermission\x12 .rbac.v1.DeletePermissionRequest\x1a!.rbac.v1.DeletePermissionResponse\"\x9d\x02\x92A\xf4\x01\n" +
	"\x04RBAC\x12\x11Delete permission\x1a^Soft-deletes a permission from rbac_db.permissions by setting deleted_at. Requires admin role.J(\n" +
	"\x03200\x12!\n" +
	"\x1fPermission deleted successfullyJ\x1d\n" +
	"\x03404\x12\x16\n" +
	"\x14Permission not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x1f*\x1d/api/v1/rbac/permissions/{id}\x12\xbd\x03\n" +
	"\x17AssignPermissionsToRole\x12'.rbac.v1.AssignPermissionsToRoleRequest\x1a(.rbac.v1.AssignPermissionsToRoleResponse\"\xce\x02\x92A\xa2\x02\n" +
	"\x04RBAC\x12\x1aAssign permissions to role\x1a_Assigns multiple permissions to a role, updating rbac_db.role_permissions. Requires admin role.J*\n" +
	"\x03200\x12#\n" +
	"!Permissions assigned successfullyJ?\n" +
	"\x03400\x128\n" +
	"6Invalid request (e.g., invalid role or permission IDs)J\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\":\x01*\"\x1d/api/v1/rbac/role-permissions\x12\xbd\x03\n" +
	"\x17AssignPermissionsToUser\x12'.rbac.v1.AssignPermissionsToUserRequest\x1a(.rbac.v1.AssignPermissionsToUserResponse\"\xce\x02\x92A\xa2\x02\n" +
	"\x04RBAC\x12\x1aAssign permissions to user\x1a_Assigns permissions directly to a user, updating rbac_db.user_permissions. Requires admin role.J*\n" +
	"\x03200\x12#\n" +
	"!Permissions assigned successfullyJ?\n" +
	"\x03400\x128\n" +
	"6Invalid request (e.g., invalid user or permission IDs)J\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\":\x01*\"\x1d/api/v1/rbac/user-permissions\x12\x9b\x03\n" +
	"\x16ListPermissionsForRole\x12&.rbac.v1.ListPermissionsForRoleRequest\x1a'.rbac.v1.ListPermissionsForRoleResponse\"\xaf\x02\x92A\xfb\x01\n" +
	"\x04RBAC\x12\x19List permissions for role\x1a`Retrieves all permissions assigned to a role from rbac_db.role_permissions. Requires admin role.J+\n" +
	"\x03200\x12$\n" +
	"\"Permissions retrieved successfullyJ\x17\n" +
	"\x03404\x12\x10\n" +
	"\x0eRole not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02*\x12(/api/v1/rbac/roles/{role_id}/permissions\x12\xaf\x02\n" +
	"\x0fListPermissions\x12\x0e.rbac.v1.Empty\x1a .rbac.v1.ListPermissionsResponse\"\xe9\x01\x92A\xc5\x01\n" +
	"\x04RBAC\x12\x14List all permissions\x1aHRetrieves all permissions from rbac_db.permissions. Requires admin role.J+\n" +
	"\x03200\x12$\n" +
	"\"Permissions retrieved successfullyJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02\x1a\x12\x18/api/v1/rbac/permissions\x12\x9b\x03\n" +
	"\x16ListPermissionsForUser\x12&.rbac.v1.ListPermissionsForUserRequest\x1a'.rbac.v1.ListPermissionsForUserResponse\"\xaf\x02\x92A\xfb\x01\n" +
	"\x04RBAC\x12\x19List permissions for user\x1a`Retrieves all permissions assigned to a user from rbac_db.user_permissions. Requires admin role.J+\n" +
	"\x03200\x12$\n" +
	"\"Permissions retrieved successfullyJ\x17\n" +
	"\x03404\x12\x10\n" +
	"\x0eUser not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02*\x12(/api/v1/rbac/users/{user_id}/permissions\x12\xeb\x02\n" +
	"\x10ListRolesForUser\x12 .rbac.v1.ListRolesForUserRequest\x1a!.rbac.v1.ListRolesForUserResponse\"\x91\x02\x92A\xe3\x01\n" +
	"\x04RBAC\x12\x13List roles for user\x1aTRetrieves all roles assigned to a user from rbac_db.user_roles. Requires admin role.J%\n" +
	"\x03200\x12\x1e\n" +
	"\x1cRoles retrieved successfullyJ\x17\n" +
	"\x03404\x12\x10\n" +
	"\x0eUser not foundJ\x1e\n" +
	"\x03500\x12\x17\n" +
	"\x15Internal server errorb\x10\n" +
	"\x0e\n" +
	"\n" +
	"BearerAuth\x12\x00\x82\xd3\xe4\x93\x02$\x12\"/api/v1/rbac/users/{user_id}/rolesB\xef\x01\x92A\xdb\x01\x12@\n" +
	"\fRBAC Service\x12+Service for managing roles and permissions.2\x031.0*\x01\x022\x10application/json:\x10application/jsonZp\n" +
	"n\n" +
	"\n" +
	"BearerAuth\x12`\b\x02\x12KJWT token using the Bearer scheme. Example: 'Authorization: Bearer {token}'\x1a\rAuthorization \x02Z\x0erbac/v1;rbacv1b\x06proto3"

var (
	file_v1_rbac_proto_rawDescOnce sync.Once
	file_v1_rbac_proto_rawDescData []byte
)

func file_v1_rbac_proto_rawDescGZIP() []byte {
	file_v1_rbac_proto_rawDescOnce.Do(func() {
		file_v1_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_rbac_proto_rawDesc), len(file_v1_rbac_proto_rawDesc)))
	})
	return file_v1_rbac_proto_rawDescData
}

var file_v1_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_v1_rbac_proto_goTypes = []any{
	(*Empty)(nil),                           // 0: rbac.v1.Empty
	(*Role)(nil),                            // 1: rbac.v1.Role
	(*Permission)(nil),                      // 2: rbac.v1.Permission
	(*CreateRoleRequest)(nil),               // 3: rbac.v1.CreateRoleRequest
	(*CreateRoleResponse)(nil),              // 4: rbac.v1.CreateRoleResponse
	(*GetRoleByNameRequest)(nil),            // 5: rbac.v1.GetRoleByNameRequest
	(*GetRoleByNameResponse)(nil),           // 6: rbac.v1.GetRoleByNameResponse
	(*ListRolesResponse)(nil),               // 7: rbac.v1.ListRolesResponse
	(*UpdateRoleRequest)(nil),               // 8: rbac.v1.UpdateRoleRequest
	(*UpdateRoleResponse)(nil),              // 9: rbac.v1.UpdateRoleResponse
	(*DeleteRoleRequest)(nil),               // 10: rbac.v1.DeleteRoleRequest
	(*DeleteRoleResponse)(nil),              // 11: rbac.v1.DeleteRoleResponse
	(*AssignRolesToUserRequest)(nil),        // 12: rbac.v1.AssignRolesToUserRequest
	(*AssignRolesToUserResponse)(nil),       // 13: rbac.v1.AssignRolesToUserResponse
	(*CreatePermissionRequest)(nil),         // 14: rbac.v1.CreatePermissionRequest
	(*CreatePermissionResponse)(nil),        // 15: rbac.v1.CreatePermissionResponse
	(*DeletePermissionRequest)(nil),         // 16: rbac.v1.DeletePermissionRequest
	(*DeletePermissionResponse)(nil),        // 17: rbac.v1.DeletePermissionResponse
	(*AssignPermissionsToRoleRequest)(nil),  // 18: rbac.v1.AssignPermissionsToRoleRequest
	(*AssignPermissionsToRoleResponse)(nil), // 19: rbac.v1.AssignPermissionsToRoleResponse
	(*AssignPermissionsToUserRequest)(nil),  // 20: rbac.v1.AssignPermissionsToUserRequest
	(*AssignPermissionsToUserResponse)(nil), // 21: rbac.v1.AssignPermissionsToUserResponse
	(*ListPermissionsForRoleRequest)(nil),   // 22: rbac.v1.ListPermissionsForRoleRequest
	(*ListPermissionsForRoleResponse)(nil),  // 23: rbac.v1.ListPermissionsForRoleResponse
	(*ListPermissionsResponse)(nil),         // 24: rbac.v1.ListPermissionsResponse
	(*ListPermissionsForUserRequest)(nil),   // 25: rbac.v1.ListPermissionsForUserRequest
	(*ListPermissionsForUserResponse)(nil),  // 26: rbac.v1.ListPermissionsForUserResponse
	(*ListRolesForUserRequest)(nil),         // 27: rbac.v1.ListRolesForUserRequest
	(*ListRolesForUserResponse)(nil),        // 28: rbac.v1.ListRolesForUserResponse
}
var file_v1_rbac_proto_depIdxs = []int32{
	1,  // 0: rbac.v1.ListRolesResponse.roles:type_name -> rbac.v1.Role
	2,  // 1: rbac.v1.ListPermissionsForRoleResponse.permissions:type_name -> rbac.v1.Permission
	2,  // 2: rbac.v1.ListPermissionsResponse.permissions:type_name -> rbac.v1.Permission
	2,  // 3: rbac.v1.ListPermissionsForUserResponse.permissions:type_name -> rbac.v1.Permission
	1,  // 4: rbac.v1.ListRolesForUserResponse.roles:type_name -> rbac.v1.Role
	3,  // 5: rbac.v1.RBACService.CreateRole:input_type -> rbac.v1.CreateRoleRequest
	5,  // 6: rbac.v1.RBACService.GetRoleByName:input_type -> rbac.v1.GetRoleByNameRequest
	0,  // 7: rbac.v1.RBACService.ListRoles:input_type -> rbac.v1.Empty
	8,  // 8: rbac.v1.RBACService.UpdateRole:input_type -> rbac.v1.UpdateRoleRequest
	10, // 9: rbac.v1.RBACService.DeleteRole:input_type -> rbac.v1.DeleteRoleRequest
	12, // 10: rbac.v1.RBACService.AssignRolesToUser:input_type -> rbac.v1.AssignRolesToUserRequest
	14, // 11: rbac.v1.RBACService.CreatePermission:input_type -> rbac.v1.CreatePermissionRequest
	16, // 12: rbac.v1.RBACService.DeletePermission:input_type -> rbac.v1.DeletePermissionRequest
	18, // 13: rbac.v1.RBACService.AssignPermissionsToRole:input_type -> rbac.v1.AssignPermissionsToRoleRequest
	20, // 14: rbac.v1.RBACService.AssignPermissionsToUser:input_type -> rbac.v1.AssignPermissionsToUserRequest
	22, // 15: rbac.v1.RBACService.ListPermissionsForRole:input_type -> rbac.v1.ListPermissionsForRoleRequest
	0,  // 16: rbac.v1.RBACService.ListPermissions:input_type -> rbac.v1.Empty
	25, // 17: rbac.v1.RBACService.ListPermissionsForUser:input_type -> rbac.v1.ListPermissionsForUserRequest
	27, // 18: rbac.v1.RBACService.ListRolesForUser:input_type -> rbac.v1.ListRolesForUserRequest
	4,  // 19: rbac.v1.RBACService.CreateRole:output_type -> rbac.v1.CreateRoleResponse
	6,  // 20: rbac.v1.RBACService.GetRoleByName:output_type -> rbac.v1.GetRoleByNameResponse
	7,  // 21: rbac.v1.RBACService.ListRoles:output_type -> rbac.v1.ListRolesResponse
	9,  // 22: rbac.v1.RBACService.UpdateRole:output_type -> rbac.v1.UpdateRoleResponse
	11, // 23: rbac.v1.RBACService.DeleteRole:output_type -> rbac.v1.DeleteRoleResponse
	13, // 24: rbac.v1.RBACService.AssignRolesToUser:output_type -> rbac.v1.AssignRolesToUserResponse
	15, // 25: rbac.v1.RBACService.CreatePermission:output_type -> rbac.v1.CreatePermissionResponse
	17, // 26: rbac.v1.RBACService.DeletePermission:output_type -> rbac.v1.DeletePermissionResponse
	19, // 27: rbac.v1.RBACService.AssignPermissionsToRole:output_type -> rbac.v1.AssignPermissionsToRoleResponse
	21, // 28: rbac.v1.RBACService.AssignPermissionsToUser:output_type -> rbac.v1.AssignPermissionsToUserResponse
	23, // 29: rbac.v1.RBACService.ListPermissionsForRole:output_type -> rbac.v1.ListPermissionsForRoleResponse
	24, // 30: rbac.v1.RBACService.ListPermissions:output_type -> rbac.v1.ListPermissionsResponse
	26, // 31: rbac.v1.RBACService.ListPermissionsForUser:output_type -> rbac.v1.ListPermissionsForUserResponse
	28, // 32: rbac.v1.RBACService.ListRolesForUser:output_type -> rbac.v1.ListRolesForUserResponse
	19, // [19:33] is the sub-list for method output_type
	5,  // [5:19] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_v1_rbac_proto_init() }
func file_v1_rbac_proto_init() {
	if File_v1_rbac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_rbac_proto_rawDesc), len(file_v1_rbac_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_rbac_proto_goTypes,
		DependencyIndexes: file_v1_rbac_proto_depIdxs,
		MessageInfos:      file_v1_rbac_proto_msgTypes,
	}.Build()
	File_v1_rbac_proto = out.File
	file_v1_rbac_proto_goTypes = nil
	file_v1_rbac_proto_depIdxs = nil
}
