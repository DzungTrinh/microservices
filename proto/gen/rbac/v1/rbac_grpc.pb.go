// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/rbac.proto

package rbacv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RBACService_CreateRole_FullMethodName              = "/rbac.v1.RBACService/CreateRole"
	RBACService_GetRoleByName_FullMethodName           = "/rbac.v1.RBACService/GetRoleByName"
	RBACService_ListRoles_FullMethodName               = "/rbac.v1.RBACService/ListRoles"
	RBACService_UpdateRole_FullMethodName              = "/rbac.v1.RBACService/UpdateRole"
	RBACService_DeleteRole_FullMethodName              = "/rbac.v1.RBACService/DeleteRole"
	RBACService_AssignRolesToUser_FullMethodName       = "/rbac.v1.RBACService/AssignRolesToUser"
	RBACService_CreatePermission_FullMethodName        = "/rbac.v1.RBACService/CreatePermission"
	RBACService_DeletePermission_FullMethodName        = "/rbac.v1.RBACService/DeletePermission"
	RBACService_AssignPermissionsToRole_FullMethodName = "/rbac.v1.RBACService/AssignPermissionsToRole"
	RBACService_AssignPermissionsToUser_FullMethodName = "/rbac.v1.RBACService/AssignPermissionsToUser"
	RBACService_ListPermissionsForRole_FullMethodName  = "/rbac.v1.RBACService/ListPermissionsForRole"
	RBACService_ListPermissions_FullMethodName         = "/rbac.v1.RBACService/ListPermissions"
	RBACService_ListPermissionsForUser_FullMethodName  = "/rbac.v1.RBACService/ListPermissionsForUser"
	RBACService_ListRolesForUser_FullMethodName        = "/rbac.v1.RBACService/ListRolesForUser"
)

// RBACServiceClient is the client API for RBACService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RBACService manages roles and permissions for users.
type RBACServiceClient interface {
	// CreateRole creates a new role.
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// GetRoleByName retrieves a role by its ID.
	GetRoleByName(ctx context.Context, in *GetRoleByNameRequest, opts ...grpc.CallOption) (*GetRoleByNameResponse, error)
	// ListRoles retrieves all roles.
	ListRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// UpdateRole updates an existing role.
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	// DeleteRole soft-deletes a role.
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// AssignRolesToUser assigns multiple roles to a user.
	AssignRolesToUser(ctx context.Context, in *AssignRolesToUserRequest, opts ...grpc.CallOption) (*AssignRolesToUserResponse, error)
	// CreatePermission creates a new permission.
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error)
	// DeletePermission soft-deletes a permission.
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	// AssignPermissionsToRole assigns permissions to a role.
	AssignPermissionsToRole(ctx context.Context, in *AssignPermissionsToRoleRequest, opts ...grpc.CallOption) (*AssignPermissionsToRoleResponse, error)
	// AssignPermissionsToUser assigns permissions directly to a user.
	AssignPermissionsToUser(ctx context.Context, in *AssignPermissionsToUserRequest, opts ...grpc.CallOption) (*AssignPermissionsToUserResponse, error)
	// ListPermissionsForRole retrieves all permissions assigned to a role.
	ListPermissionsForRole(ctx context.Context, in *ListPermissionsForRoleRequest, opts ...grpc.CallOption) (*ListPermissionsForRoleResponse, error)
	// ListPermissions retrieves all permissions.
	ListPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPermissionsResponse, error)
	// ListPermissionsForUser retrieves all permissions assigned to a user.
	ListPermissionsForUser(ctx context.Context, in *ListPermissionsForUserRequest, opts ...grpc.CallOption) (*ListPermissionsForUserResponse, error)
	// ListRolesForUser retrieves all roles assigned to a user.
	ListRolesForUser(ctx context.Context, in *ListRolesForUserRequest, opts ...grpc.CallOption) (*ListRolesForUserResponse, error)
}

type rBACServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRBACServiceClient(cc grpc.ClientConnInterface) RBACServiceClient {
	return &rBACServiceClient{cc}
}

func (c *rBACServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) GetRoleByName(ctx context.Context, in *GetRoleByNameRequest, opts ...grpc.CallOption) (*GetRoleByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleByNameResponse)
	err := c.cc.Invoke(ctx, RBACService_GetRoleByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, RBACService_ListRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_UpdateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignRolesToUser(ctx context.Context, in *AssignRolesToUserRequest, opts ...grpc.CallOption) (*AssignRolesToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignRolesToUserResponse)
	err := c.cc.Invoke(ctx, RBACService_AssignRolesToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*CreatePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, RBACService_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignPermissionsToRole(ctx context.Context, in *AssignPermissionsToRoleRequest, opts ...grpc.CallOption) (*AssignPermissionsToRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPermissionsToRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_AssignPermissionsToRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) AssignPermissionsToUser(ctx context.Context, in *AssignPermissionsToUserRequest, opts ...grpc.CallOption) (*AssignPermissionsToUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignPermissionsToUserResponse)
	err := c.cc.Invoke(ctx, RBACService_AssignPermissionsToUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListPermissionsForRole(ctx context.Context, in *ListPermissionsForRoleRequest, opts ...grpc.CallOption) (*ListPermissionsForRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionsForRoleResponse)
	err := c.cc.Invoke(ctx, RBACService_ListPermissionsForRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListPermissions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionsResponse)
	err := c.cc.Invoke(ctx, RBACService_ListPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListPermissionsForUser(ctx context.Context, in *ListPermissionsForUserRequest, opts ...grpc.CallOption) (*ListPermissionsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionsForUserResponse)
	err := c.cc.Invoke(ctx, RBACService_ListPermissionsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rBACServiceClient) ListRolesForUser(ctx context.Context, in *ListRolesForUserRequest, opts ...grpc.CallOption) (*ListRolesForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRolesForUserResponse)
	err := c.cc.Invoke(ctx, RBACService_ListRolesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RBACServiceServer is the server API for RBACService service.
// All implementations should embed UnimplementedRBACServiceServer
// for forward compatibility.
//
// RBACService manages roles and permissions for users.
type RBACServiceServer interface {
	// CreateRole creates a new role.
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// GetRoleByName retrieves a role by its ID.
	GetRoleByName(context.Context, *GetRoleByNameRequest) (*GetRoleByNameResponse, error)
	// ListRoles retrieves all roles.
	ListRoles(context.Context, *Empty) (*ListRolesResponse, error)
	// UpdateRole updates an existing role.
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	// DeleteRole soft-deletes a role.
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// AssignRolesToUser assigns multiple roles to a user.
	AssignRolesToUser(context.Context, *AssignRolesToUserRequest) (*AssignRolesToUserResponse, error)
	// CreatePermission creates a new permission.
	CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error)
	// DeletePermission soft-deletes a permission.
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	// AssignPermissionsToRole assigns permissions to a role.
	AssignPermissionsToRole(context.Context, *AssignPermissionsToRoleRequest) (*AssignPermissionsToRoleResponse, error)
	// AssignPermissionsToUser assigns permissions directly to a user.
	AssignPermissionsToUser(context.Context, *AssignPermissionsToUserRequest) (*AssignPermissionsToUserResponse, error)
	// ListPermissionsForRole retrieves all permissions assigned to a role.
	ListPermissionsForRole(context.Context, *ListPermissionsForRoleRequest) (*ListPermissionsForRoleResponse, error)
	// ListPermissions retrieves all permissions.
	ListPermissions(context.Context, *Empty) (*ListPermissionsResponse, error)
	// ListPermissionsForUser retrieves all permissions assigned to a user.
	ListPermissionsForUser(context.Context, *ListPermissionsForUserRequest) (*ListPermissionsForUserResponse, error)
	// ListRolesForUser retrieves all roles assigned to a user.
	ListRolesForUser(context.Context, *ListRolesForUserRequest) (*ListRolesForUserResponse, error)
}

// UnimplementedRBACServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRBACServiceServer struct{}

func (UnimplementedRBACServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedRBACServiceServer) GetRoleByName(context.Context, *GetRoleByNameRequest) (*GetRoleByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByName not implemented")
}
func (UnimplementedRBACServiceServer) ListRoles(context.Context, *Empty) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedRBACServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRBACServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRBACServiceServer) AssignRolesToUser(context.Context, *AssignRolesToUserRequest) (*AssignRolesToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRolesToUser not implemented")
}
func (UnimplementedRBACServiceServer) CreatePermission(context.Context, *CreatePermissionRequest) (*CreatePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedRBACServiceServer) DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedRBACServiceServer) AssignPermissionsToRole(context.Context, *AssignPermissionsToRoleRequest) (*AssignPermissionsToRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPermissionsToRole not implemented")
}
func (UnimplementedRBACServiceServer) AssignPermissionsToUser(context.Context, *AssignPermissionsToUserRequest) (*AssignPermissionsToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPermissionsToUser not implemented")
}
func (UnimplementedRBACServiceServer) ListPermissionsForRole(context.Context, *ListPermissionsForRoleRequest) (*ListPermissionsForRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionsForRole not implemented")
}
func (UnimplementedRBACServiceServer) ListPermissions(context.Context, *Empty) (*ListPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissions not implemented")
}
func (UnimplementedRBACServiceServer) ListPermissionsForUser(context.Context, *ListPermissionsForUserRequest) (*ListPermissionsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionsForUser not implemented")
}
func (UnimplementedRBACServiceServer) ListRolesForUser(context.Context, *ListRolesForUserRequest) (*ListRolesForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolesForUser not implemented")
}
func (UnimplementedRBACServiceServer) testEmbeddedByValue() {}

// UnsafeRBACServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RBACServiceServer will
// result in compilation errors.
type UnsafeRBACServiceServer interface {
	mustEmbedUnimplementedRBACServiceServer()
}

func RegisterRBACServiceServer(s grpc.ServiceRegistrar, srv RBACServiceServer) {
	// If the following call pancis, it indicates UnimplementedRBACServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RBACService_ServiceDesc, srv)
}

func _RBACService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_GetRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).GetRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_GetRoleByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).GetRoleByName(ctx, req.(*GetRoleByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignRolesToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRolesToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignRolesToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignRolesToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignRolesToUser(ctx, req.(*AssignRolesToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignPermissionsToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPermissionsToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignPermissionsToRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignPermissionsToRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignPermissionsToRole(ctx, req.(*AssignPermissionsToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_AssignPermissionsToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPermissionsToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).AssignPermissionsToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_AssignPermissionsToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).AssignPermissionsToUser(ctx, req.(*AssignPermissionsToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListPermissionsForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsForRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListPermissionsForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListPermissionsForRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListPermissionsForRole(ctx, req.(*ListPermissionsForRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListPermissions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListPermissionsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListPermissionsForUser(ctx, req.(*ListPermissionsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RBACService_ListRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RBACServiceServer).ListRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RBACService_ListRolesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RBACServiceServer).ListRolesForUser(ctx, req.(*ListRolesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RBACService_ServiceDesc is the grpc.ServiceDesc for RBACService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RBACService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.v1.RBACService",
	HandlerType: (*RBACServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _RBACService_CreateRole_Handler,
		},
		{
			MethodName: "GetRoleByName",
			Handler:    _RBACService_GetRoleByName_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _RBACService_ListRoles_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RBACService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RBACService_DeleteRole_Handler,
		},
		{
			MethodName: "AssignRolesToUser",
			Handler:    _RBACService_AssignRolesToUser_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _RBACService_CreatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _RBACService_DeletePermission_Handler,
		},
		{
			MethodName: "AssignPermissionsToRole",
			Handler:    _RBACService_AssignPermissionsToRole_Handler,
		},
		{
			MethodName: "AssignPermissionsToUser",
			Handler:    _RBACService_AssignPermissionsToUser_Handler,
		},
		{
			MethodName: "ListPermissionsForRole",
			Handler:    _RBACService_ListPermissionsForRole_Handler,
		},
		{
			MethodName: "ListPermissions",
			Handler:    _RBACService_ListPermissions_Handler,
		},
		{
			MethodName: "ListPermissionsForUser",
			Handler:    _RBACService_ListPermissionsForUser_Handler,
		},
		{
			MethodName: "ListRolesForUser",
			Handler:    _RBACService_ListRolesForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/rbac.proto",
}
