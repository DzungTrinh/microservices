syntax = "proto3";
package user.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "user/v1;userv1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Management API";
    version: "1.0";
    description: "API for user registration, authentication, and user management.";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "JWT token using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
      }
    }
  };
};

service UserService {
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/api/v1/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register a user";
      description: "Creates a new user in user_db.users, stores credentials, and assigns default role via rbac-svc.";
      tags: ["Auth"];
      responses: {
        key: "200";
        value: { description: "User registered successfully"; }
      };
      responses: {
        key: "400";
        value: { description: "Invalid request"; }
      };
      responses: {
        key: "500";
        value: { description: "Internal server error"; }
      };
    };
  }
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login a user";
      description: "Authenticates a user and issues access and refresh tokens.";
      tags: ["Auth"];
      responses: {
        key: "200";
        value: { description: "User logged in successfully"; }
      };
      responses: {
        key: "401";
        value: { description: "Invalid credentials"; }
      };
      responses: {
        key: "500";
        value: { description: "Internal server error"; }
      };
    };
  }
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/api/v1/refresh"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh token";
      description: "Validates a refresh token and issues new access and refresh tokens.";
      tags: ["Auth"];
      responses: {
        key: "200";
        value: { description: "Tokens refreshed successfully"; }
      };
      responses: {
        key: "401";
        value: { description: "Invalid or expired refresh token"; }
      };
      responses: {
        key: "500";
        value: { description: "Internal server error"; }
      };
    };
  }
}

message RegisterRequest {
  string email = 1; // Email address
  string username = 2; // Username
  string password = 3; // Password
}

message RegisterResponse {
  string user_id = 1; // UUID of the created user
  string email = 2; // Email address
  string username = 3; // Username
  string access_token = 4; // JWT access token
  string refresh_token = 5; // Refresh token
  bool success = 6; // True if registration succeeded
  string error = 7; // Error message if failed
}

message LoginRequest {
  string email = 1; // Email address
  string password = 2; // Password
}

message LoginResponse {
  string user_id = 1; // UUID of the user
  string email = 2; // Email address
  string username = 3; // Username
  string access_token = 4; // JWT access token
  string refresh_token = 5; // Refresh token
  bool success = 6; // True if login succeeded
  string error = 7; // Error message if failed
}

message RefreshTokenRequest {
  string refresh_token = 1; // Refresh token
}

message RefreshTokenResponse {
  string access_token = 1; // New JWT access token
  string refresh_token = 2; // New refresh token
  bool success = 3; // True if token refresh succeeded
  string error = 4; // Error message if failed
}