syntax = "proto3";
package user.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "user/v1;userv1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Management API";
    version: "1.0";
    description: "API for user registration, authentication, and user management.";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "JWT token using the Bearer scheme. Example: 'Authorization: Bearer {token}'"
      }
    }
  };
};

service UserService {
  rpc Register(RegisterRequest) returns (AuthTokens) {
    option (google.api.http) = {
      post: "/api/v1/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Register user"
      description: "Creates a new user with provided credentials."
      tags: ["Auth"]
    };
  }
  rpc Login(LoginRequest) returns (AuthTokens) {
    option (google.api.http) = {
      post: "/api/v1/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login user"
      description: "Authenticates a user and returns access and refresh tokens."
      tags: ["Auth"]
    };
  }
  rpc Refresh(RefreshRequest) returns (AccessToken) {
    option (google.api.http) = {
      post: "/api/v1/refresh"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Refresh token"
      description: "Verify refresh token then get new access token and refresh token."
      tags: ["Auth"]
    };
  }
  rpc GetAllUsers(Empty) returns (UserList) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "List all users"
      description: "Retrieves a list of all registered users. Requires admin role."
      tags: ["Users"]
      security: [
        {
          security_requirement: {
            key: "BearerAuth",
            value: {}
          }
        }
      ]
    };
  }
  rpc GetUserByID(GetUserByIDRequest) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get user by ID"
      description: "Retrieves details of a specific user by their ID. Requires authentication."
      tags: ["Users"]
      security: [
        {
          security_requirement: {
            key: "BearerAuth",
            value: {}
          }
        }
      ]
    };
  }
  rpc GetCurrentUser(Empty) returns (User) {
    option (google.api.http) = {
      get: "/api/v1/users/me"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get current user"
      description: "Retrieves details of the authenticated user. Requires authentication."
      tags: ["Users"]
      security: [
        {
          security_requirement: {
            key: "BearerAuth",
            value: {}
          }
        }
      ]
    };
  }
  rpc UpdateUserRoles(UpdateUserRolesRequest) returns (User) {
    option (google.api.http) = {
      put: "/api/v1/users/{id}/roles"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update user roles"
      description: "Updates the roles of a specific user. Requires admin role."
      tags: ["Users"]
      security: [
        {
          security_requirement: {
            key: "BearerAuth",
            value: {}
          }
        }
      ]
    };
  }
}

message Empty {}
message RegisterRequest {string email = 1; string username = 2; string password = 3;}
message LoginRequest    {string email = 1; string password = 2;}
message RefreshRequest  {string refresh_token = 1;}

message AuthTokens  {string access_token = 1; string refresh_token = 2; bool mfa_required = 3;}
message AccessToken {string access_token = 1;}

message User {
  string id = 1;
  string username = 2;
  string email = 3;
  repeated string roles = 4;
}

message UserList {
  repeated User users = 1;
}

message GetUserByIDRequest {
  string id = 1;
}

message UpdateUserRolesRequest {
  string id = 1;
  repeated string roles = 2;
}
